import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import hashlib
from http.client import responses
import logging
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, KeyboardButton, \
    ReplyKeyboardMarkup
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import MessageNotModified
from main import bot, dp
from aiogram.types import Message, InputMediaPhoto, InputTextMessageContent, InlineQueryResultArticle, ChatActions
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import ContentTypeFilter, ForwardedMessageFilter
import datetime
from config import admins, not_sub_message, BOT_NICKNAME, BotConfig
import markups as nav
from utils.db import DataBase
import admin, mail
from utils.api import Api


db = DataBase('db.db')

api = Api()

bot_config = BotConfig()
bot_config.load_from_database()

services = api.services()  # Return all services

class addPost(StatesGroup):
    url = State()
    amount = State()

async def send_to_admin(dp):
    try:
        i = 0
        for i in range(len(admins)):
            await bot.send_message(chat_id=admins[i], text='‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    except Exception as e:
        pass

async def check_sub_channels(channels, user_id):
    for channel in channels:
        chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=user_id)
        if chat_member['status'] == 'left':
            return False
    return True

async def checkdays():
    d = datetime.datetime.now()
    date = d.timestamp()
    bm = db.check_date(date)
    for b in bm:
        await update_entry(b)

async def update_entry(entry):
        db.update_entry(entry[1])
        await bot.send_message(entry[1], "–°—Ä–æ–∫ –≤–∞—à–µ–π –∞—Ä–µ–Ω–¥—ã –∏—Å—Ç–µ–∫!", reply_markup=nav.greet_kb)

async def checkviews():
    order_ids = db.get_orderAll()
    for order_id in order_ids:
        remains = api.status(order_id)['remains']
        if remains == '0':
            db.delete_post(order_id[0])

@dp.message_handler(commands=['start'])
async def starting(message: Message):
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            start_command = message.text
            referer_id = str(start_command[7:])
            if str(referer_id) != "":
                if str(referer_id) != str(message.from_user.id):
                    db.add_user(message.from_user.id, referer_id)
                    await bot.send_message(message.from_user.id, "üë®üèª‚Äçüíª –ü—Ä–∏–≤–µ—Ç!\n\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram.\n\n–ñ–º–∏ üìÜ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.\n\nü§ö–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤üëáüèª‚ú®", reply_markup=nav.showChannels(message.from_user.id))
                    await bot.send_message(referer_id, "üéÅ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!")
                else:
                    db.add_user(message.from_user.id)
                    await bot.send_message(message.from_user.id, "üë®üèª‚Äçüíª –ü—Ä–∏–≤–µ—Ç!\n\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram.\n\n–ñ–º–∏ üìÜ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.\n\nü§ö–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤üëáüèª‚ú®", reply_markup=nav.showChannels(message.from_user.id))
            else:
                db.add_user(message.from_user.id)
                await bot.send_message(message.from_user.id, "üë®üèª‚Äçüíª –ü—Ä–∏–≤–µ—Ç!\n\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram.\n\n–ñ–º–∏ üìÜ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.\n\nü§ö–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤üëáüèª‚ú®", reply_markup=nav.showChannels(message.from_user.id))
        else:
            status = db.check_status(message.from_user.id)[0]
            if status == 1:
                await bot.send_message(message.from_user.id, "üë®üèª‚Äçüíª –ü—Ä–∏–≤–µ—Ç!\n\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram.\n\n–ñ–º–∏ üìÜ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.", reply_markup=nav.rental_kb)
            else:
                channels = db.channels_get()
                if not await check_sub_channels(channels, message.from_user.id) or channels is None:
                    await bot.send_message(message.from_user.id, "üë®üèª‚Äçüíª –ü—Ä–∏–≤–µ—Ç!\n\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram.\n\n–ñ–º–∏ üìÜ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.\n\nü§ö–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤üëáüèª‚ú®", reply_markup=nav.showChannels(message.from_user.id))
                else:
                    await bot.send_message(message.from_user.id, "üë®üèª‚Äçüíª –ü—Ä–∏–≤–µ—Ç!\n\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram.\n\n–ñ–º–∏ üìÜ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.", reply_markup=nav.greet_kb)

@dp.callback_query_handler(text_contains='subchannelDone')
async def subchannelDone(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    channels = db.channels_get()
    if await check_sub_channels(channels, call.from_user.id):
        await bot.send_message(call.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.", reply_markup=nav.greet_kb)
    else:
        await call.answer(text=not_sub_message, show_alert=True)
        await bot.send_message(call.from_user.id, 'üìù <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>', reply_markup=nav.showChannels(call.from_user.id), parse_mode="HTML")
        
@dp.message_handler(state=addPost, text='‚èπ –û—Ç–º–µ–Ω–∞')
async def cancel_button_handler_inside_state(message: types.Message, state: FSMContext):
    await state.reset_state() 
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=nav.rental_kb)

@dp.message_handler(content_types=['text'], state=None)
async def text_menu(message: Message):
    state = db.getState(message.from_user.id)[0]
    value = message.text
    if state != 0:
        if value.isdigit():
            if state == 101:
                db.updateConfig('max_post', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 102:
                db.updateConfig('limit_post', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 103:
                db.updateConfig('price_1', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 104:
                db.updateConfig('price_2', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 105:
                db.updateConfig('price_3', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 106:
                db.updateConfig('price_4', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 107:
                db.updateConfig('price_5', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 108:
                db.updateConfig('price_6', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
            if state == 109:
                db.updateConfig('price_7', value)
                await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                bot_config.load_from_database()
                db.setState(0, message.from_user.id)
        else:
            await bot.send_message(message.from_user.id, '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–Ω—è—Ç–Ω–æ–µ')
            db.setState(0, message.from_user.id)
    if message.chat.type == 'private':
        if message.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
            number_referrals = db.count_referes(message.from_user.id)[0]
            await bot.send_message(message.from_user.id, '<b>üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•</b>\n\nüë§ –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: <b>{0}</b>\n\nüîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{1}?start={2}\n\nü§ù –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ <b>–¥—Ä—É–∑–µ–π</b> –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞—à–µ —É–≤–∞–∂–µ–Ω–∏–µ!.'.format(number_referrals, BOT_NICKNAME, message.from_user.id), parse_mode="HTML", disable_web_page_preview=True)
        if message.text == 'üí∑ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ—Ç–∞':
            await bot.send_message(message.from_user.id, f'üí∂ –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:\n1 –¥–µ–Ω—å - {bot_config.param3}‚ÇΩ\n3 –¥–Ω—è - {bot_config.param4}‚ÇΩ\n7 –¥–Ω–µ–π - {bot_config.param5}‚ÇΩ\n1 –º–µ—Å—è—Ü - {bot_config.param6}‚ÇΩ\n3 –º–µ—Å—è—Ü–∞ - {bot_config.param7}‚ÇΩ\n6 –º–µ—Å—è—Ü–µ–≤ - {bot_config.param8}‚ÇΩ\n12 –º–µ—Å—è—Ü–µ–≤ - {bot_config.param9}‚ÇΩ', reply_markup=nav.generate_payment_buttons(message.from_user.id))
        if message.text == 'üí∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π':
            time = db.date_rental(message.from_user.id)[0]
            if time is not None:
                current_time = datetime.datetime.now().timestamp()
                time_diff = time - current_time
                days = int(time_diff // (3600 * 24))
                hours = int((time_diff % (3600 * 24)) // 3600)
                minutes = int((time_diff % 3600) // 60)
                seconds = int(time_diff % 60)
                await bot.send_message(message.from_user.id, f'üïê –û—Å—Ç–∞–ª–æ—Å—å {days}–¥ {hours}—á {minutes}–º–∏–Ω {seconds}—Å–µ–∫\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã:\n1 –¥–µ–Ω—å - {bot_config.param3}‚ÇΩ\n3 –¥–Ω—è - {bot_config.param4}‚ÇΩ\n7 –¥–Ω–µ–π - {bot_config.param5}‚ÇΩ\n1 –º–µ—Å—è—Ü - {bot_config.param6}‚ÇΩ\n3 –º–µ—Å—è—Ü–∞ - {bot_config.param7}‚ÇΩ\n6 –º–µ—Å—è—Ü–µ–≤ - {bot_config.param8}‚ÇΩ\n12 –º–µ—Å—è—Ü–µ–≤ - {bot_config.param9}‚ÇΩ', reply_markup=nav.generate_payment_buttons(message.from_user.id))
            else:
                return 'error'
        if message.text == 'üìü –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
            await bot.send_message(message.from_user.id, 'üì† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</b>\n\n–ï—Å–ª–∏ —Ç—ã –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ <b>–∂–º–∏</b>:\n\n‚Ä¢ üí∑ <b>–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ—Ç–∞</b> - –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ (–Ω–∞ 7 –ª–∏–±–æ 30 –¥–Ω–µ–π).\n‚Ä¢ üìÜ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥</b> - –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –æ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å" –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.\n\n–ï—Å–ª–∏ –∂–µ —Ç—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥, —Ç–æ –∂–º–∏:\n\n‚Ä¢ üé¥ <b>–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç</b> - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –ª—é–±–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞–∫—Ä—É—Ç–∫—É. –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ.\n‚Ä¢ üö¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫—Ä—É—Ç–∫–æ–π</b> - –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ—à—å –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏.\n‚Ä¢ üí∑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π</b> - –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –∞—Ä–µ–Ω–¥—ã –±–æ—Ç–∞ (–Ω–∞ 7 –ª–∏–±–æ 30 –¥–Ω–µ–π).', parse_mode="HTML")
        if message.text == 'üìÜ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥':
            await bot.send_message(message.from_user.id, 'üì≤–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–∏—à–∏—Ç–µ @UFCMMATOP\n\nüïí –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: 0 –º–∏–Ω—É—Ç.')
        if message.text == 'üö¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫—Ä—É—Ç–∫–æ–π':
            post_message, keyboard = nav.generate_postmenu(message.from_user.id)
            await bot.send_message(message.from_user.id, text=post_message, parse_mode="HTML", disable_web_page_preview=True)
        if message.text == 'üé¥ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç':
            await addPost.url.set()
            cancel_button = KeyboardButton('‚èπ –û—Ç–º–µ–Ω–∞')
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_button)
            await bot.send_message(message.from_user.id, 'üÉè –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ø–æ—Å—Ç –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', reply_markup=keyboard)
        

@dp.message_handler(content_types=['any'], is_forwarded=True, state=addPost.url)
async def handle_forwarded_message(message: Message, state: FSMContext):
    status = db.check_status(message.from_user.id)[0]
    max_post = db.count_post(message.from_user.id)[0]
    if status == 1 and max_post < int(bot_config.param1):
        if message.forward_from_chat is not None:
            post_link = f"https://t.me/{message.forward_from_chat.username}/{message.forward_from_message_id}"
            await state.update_data({'url': post_link})
            await addPost.next()
            await message.reply(f'üïπ –í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∫—Ä—É—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è (–¥–æ {bot_config.param2}):')
        else:
            await state.finish()
            await message.reply('–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ–º —Å –∫–∞–Ω–∞–ª–∞!', reply_markup=nav.rental_kb)
    else:
        await state.finish()
        await message.reply(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Ä–∞–≤–Ω–æ {bot_config.param1}.', reply_markup=nav.rental_kb)


@dp.message_handler(state=addPost.amount)
async def load_post_amount(message: types.Message, state: FSMContext):
    amount = message.text
    if amount.isdigit():
        if int(amount) > 100 and int(amount) <= int(bot_config.param2):
            url = await state.get_data('url')
            url = url.get('url')
            await state.finish()
            order_id = api.order({'service': 2598, 'link': url, 'quantity': amount})
            db.add_post(order_id['order'], url, amount, message.from_user.id)
            db.increment_count_post()
            await bot.send_message(message.from_user.id, f'üé¥ –ü–æ—Å—Ç {url} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=nav.rental_kb, disable_web_page_preview=True)
        else:
            await state.finish()
            await message.reply(f'üïπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 100, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ - {bot_config.param2}', reply_markup=nav.rental_kb)
    else:
        await state.finish()
        await message.reply('–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.', reply_markup=nav.rental_kb)

