from aiogram.utils.exceptions import MessageNotModified
from main import bot, dp
from aiogram.types import Message, InputMediaPhoto
from aiogram import types, Dispatcher
from config import admins
import markups as nav
from db import DataBase
import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, KeyboardButton, \
    ReplyKeyboardMarkup

db = DataBase('db.db')

class ConfigBon(StatesGroup):
    editConfig = State()

class ConfigMin(StatesGroup):
    editConfig = State()

class addUrl(StatesGroup):
    url = State()

class addChannels(StatesGroup):
    name = State()
    id = State()
    url = State()

class addCC(StatesGroup):
    photo = State()
    name = State()
    description = State()
    url = State()


@dp.message_handler(commands=['admin'])
async def send(message: Message):
    if message.chat.type == 'private':
        if message.from_user.id in admins:
            stats = db.stats_users()
            vipl = db.get_vipl()
            await bot.send_message(message.from_user.id, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <b>{0}</b>\n–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: <b>{1}‚ÇΩ</b>'.format(stats[0], vipl[0]), reply_markup=nav.adminsMenu, parse_mode='HTML')

@dp.callback_query_handler(text_contains='admin_', state=None)
async def subchannelDone(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data == 'admin_2':
        await bot.send_message(call.from_user.id, 'üìñ –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=nav.channelsMenu)
    if call.data == 'admin_3':
        await bot.send_message(call.from_user.id, 'üìé –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=nav.CCMenu)
    if call.data == 'admin_4':
        await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π url —Å—Å—ã–ª–∫–∏ "–ó–∞—Ä–∞–±–æ—Ç–∫–∞ –æ–±—É—á–µ–Ω–∏—è":')
        await addUrl.url.set()
    if call.data == 'admin_5':
        await bot.send_message(call.from_user.id, '‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=nav.configMenu)
    if call.data == 'admin_6':
        outputs = db.get_output()
        if (outputs != ""):
            for output in outputs:
                outputMenu = InlineKeyboardMarkup(row_width=2)
                accept = InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_" + str(output[0]))
                returs = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="returs_" + str(output[0]))
                outputMenu.insert(accept)
                outputMenu.insert(returs)
                await bot.send_message(call.from_user.id, 'üì§ –ó–∞—è–≤–∫–∞ <a href="tg://user?id={0}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</a>\n\n‚ñ´Ô∏è ID: {0}\n‚ñ´Ô∏è –ö–æ—à–µ–ª—ë–∫: {1}\n‚ñ´Ô∏è –°—É–º–º–∞: {2}'.format(output[1], output[3], output[2]), reply_markup=outputMenu)
        if not db.get_output():
            await bot.send_message(call.from_user.id, '‚ùå –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –Ω–µ—Ç')

@dp.callback_query_handler(text_contains='accept_', state=None)
async def subchannelDone(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data.split("_")[0] == 'accept':
        id = call.data.split("_")[1]
        db.accept_vipl(id)
        user_id = db.get_accept(id)[0]
        await bot.send_message(call.from_user.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ')
        await bot.send_message(user_id, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞!')

@dp.callback_query_handler(text_contains='returs_', state=None)
async def subchannelDone(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data.split("_")[0] == 'returs':
        id = call.data.split("_")[1]
        user_id = db.get_accept(id)[0]
        await bot.send_message(call.from_user.id, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        await bot.send_message(user_id, '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        db.delete_vipl(id)


@dp.callback_query_handler(text_contains='config_', state=None)
async def subchannelDone(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data == 'config_1':
        await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: ')
        await ConfigBon.editConfig.set()
    if call.data == 'config_2':
        await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É: ')
        await ConfigMin.editConfig.set()

@dp.message_handler(state=ConfigBon.editConfig)
async def load_user_id(message: types.Message, state: FSMContext):
    editConfig = message.text
    db.edit_config(editConfig)
    await state.finish()
    await bot.send_message(message.from_user.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

@dp.message_handler(state=ConfigMin.editConfig)
async def load_user_id(message: types.Message, state: FSMContext):
    editConfig = message.text
    db.edit_configMin(editConfig)
    await state.finish()
    await bot.send_message(message.from_user.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

@dp.message_handler(state=addUrl.url)
async def load_user_id(message: types.Message, state: FSMContext):
    url = message.text
    db.edit_url(url)
    await state.finish()
    await bot.send_message(message.from_user.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

@dp.callback_query_handler(text_contains='channels', state=None)
async def geolocat(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.from_user.id in admins and call.data == 'channelsAdd':
        await addChannels.name.set()
        await bot.send_message(call.from_user.id, 'üöÄ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:')
    if call.from_user.id in admins and call.data == 'channelsMin':
        channels = db.channels_get()
        text = []
        for channel in channels:
            text.append("<b>" + channel[0] + "</b> - " + channel[2])
        await bot.send_message(call.from_user.id, 'üóì <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n' + "\n".join(text), reply_markup=nav.showChannelsAdm(), disable_web_page_preview=True)

@dp.callback_query_handler(text_contains='delete', state=None)
async def geolocat(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.from_user.id in admins and call.data.split("_")[0] == 'delete':
        id_channel = call.data.split("_")[1]
        db.channel_delete(id_channel)
        await bot.send_message(call.from_user.id, '‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–æ!')

@dp.callback_query_handler(text_contains='backAdm', state=None)
async def geolocat(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.from_user.id in admins and call.data == 'backAdm':
        stats = db.stats_users()
        await bot.send_message(call.from_user.id, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <b>{0}</b>'.format(stats[0]), reply_markup=nav.adminsMenu, parse_mode='HTML')

@dp.message_handler(state=addChannels.name)
async def load_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data({'name': name})
    await addChannels.next()
    await message.reply('ü§î –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞: ')

@dp.message_handler(state=addChannels.id)
async def load_user_id(message: types.Message, state: FSMContext):
    id = message.text
    await state.update_data({'id': id})
    await addChannels.next()
    await message.reply('üëÄ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ url —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞: ')

@dp.message_handler(state=addChannels.url)
async def load_user_id(message: types.Message, state: FSMContext):
    url = message.text
    await state.update_data({'url': url})
    name = await state.get_data('name')
    name = name.get('name')
    id = await state.get_data('id')
    id = id.get('id')
    url = await state.get_data('url')
    url = url.get('url')
    db.channels_save(name, id, url)
    await state.finish()
    await bot.send_message(message.from_user.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

@dp.callback_query_handler(text_contains='CC', state=None)
async def geolocat(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.from_user.id in admins and call.data == 'CCAdd':
        await addCC.photo.set()
        await bot.send_message(call.from_user.id, 'üî¥ –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ')
    if call.from_user.id in admins and call.data == 'CCMin':
        ccs = db.cc_get()
        text = []
        for cc in ccs:
            text.append("<b>" + cc[2] + "</b> - " + cc[4])
        await bot.send_message(call.from_user.id, 'üóì <b>–°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ:</b>\n\n' + "\n".join(text), reply_markup=nav.showCCAdm(), disable_web_page_preview=True)

@dp.callback_query_handler(text_contains='stop', state=None)
async def geolocat(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.from_user.id in admins and call.data.split("_")[0] == 'stop':
        id = call.data.split("_")[1]
        db.cc_delete(id)
        await bot.send_message(call.from_user.id, '‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–æ!')

@dp.message_handler(content_types=['photo'], state=addCC.photo)
async def load_photo(message: types.Message, state:FSMContext):
    photo = message.photo[0].file_id
    await state.update_data({'photo': photo})
    await addCC.next()
    await message.reply('üü† –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è')

@dp.message_handler(state=addCC.name)
async def load_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data({'name': name})
    await addCC.next()
    await message.reply('ü§î –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')

@dp.message_handler(state=addCC.description)
async def load_name(message: types.Message, state: FSMContext):
    description = message.text
    await state.update_data({'description': description})
    await addCC.next()
    await message.reply('ü§î –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ url –ø–æ—Ç–æ–∫–∞:')

@dp.message_handler(state=addCC.url)
async def load_user_id(message: types.Message, state: FSMContext):
    url = message.text
    await state.update_data({'url': url})
    photo = await state.get_data('photo')
    photo = photo.get('photo')
    name = await state.get_data('name')
    name = name.get('name')
    description = await state.get_data('description')
    description = description.get('description')
    url = await state.get_data('url')
    url = url.get('url')
    db.cc_save(photo, name, description, url)
    await state.finish()
    await bot.send_message(message.from_user.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

def updateConfig():
    REF_BONUS = db.get_refBonus()[0]
    return REF_BONUS

def updateConfigOne():
    Min_payOut = db.get_MinpayOUt()[0]
    return Min_payOut
